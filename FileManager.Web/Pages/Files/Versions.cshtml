@page "/Files/{fileId:guid}/Versions"
@model FileManager.Web.Pages.Files.VersionsModel
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@{
    ViewData["Title"] = $"История версий - {Model.FileName}";
}

<div class="versions-container">
    <!-- Заголовок страницы -->
    <div class="versions-header">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center">
                <button class="btn btn-outline-secondary me-3" onclick="history.back()">
                    <i class="bi bi-arrow-left"></i>
                </button>
                <div>
                    <h1 class="fs-4 mb-1">История версий</h1>
                    <div class="d-flex align-items-center text-muted small">
                        <i class="@Model.FileIconClass me-2"></i>
                        <span class="text-truncate">@Model.FileName</span>
                        <span class="ms-2">(@Model.FormattedSize)</span>
                    </div>
                </div>
            </div>

            <div>
                <button class="btn btn-primary btn-sm" onclick="createManualVersion()">
                    <i class="bi bi-save me-1"></i> Создать версию
                </button>
            </div>
        </div>

        @if (Model.ActiveEditors.Any())
        {
            <div class="alert alert-warning d-flex align-items-center" role="alert">
                <i class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2"></i>
                <div>
                    <strong>Внимание!</strong>
                    Файл сейчас редактируется: @string.Join(", ", Model.ActiveEditors)
                </div>
            </div>
        }
    </div>

    <!-- Временная шкала версий -->
    <div class="versions-timeline">
        @if (Model.Versions.Any())
        {
            <div class="versions-line"></div>

            @foreach (var version in Model.Versions)
            {
                <div class="version-item @(version.IsCurrentVersion ? "current-version" : "")">
                    <div class="version-badge">
                        <div class="version-number">v@version.VersionNumber</div>
                        @if (version.IsCurrentVersion)
                        {
                            <div class="current-marker">Текущая</div>
                        }
                    </div>

                    <div class="version-card shadow-sm">
                        <div class="version-header">
                            <div class="version-info">
                                <div class="version-title">Версия @version.VersionNumber</div>
                                <div class="version-date">@version.CreatedAt.ToString("dd.MM.yyyy HH:mm")</div>
                            </div>
                            <div class="version-user">
                                <i class="bi bi-person me-1"></i> @version.CreatedByName
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(version.Comment))
                        {
                            <div class="version-comment">
                                <i class="bi bi-chat-left-text me-1"></i> @version.Comment
                            </div>
                        }

                        <div class="version-details">
                            <div class="version-size">
                                <i class="bi bi-hdd me-1"></i> @version.FormattedSize
                            </div>
                        </div>

                        <div class="version-actions">
                            <button class="btn btn-outline-secondary btn-sm" onclick="downloadVersion('@version.Id')">
                                <i class="bi bi-download me-1"></i> Скачать
                            </button>

                            @if (!version.IsCurrentVersion)
                            {
                                <button class="btn btn-primary btn-sm" onclick="openRestoreModal('@version.Id', @version.VersionNumber)">
                                    <i class="bi bi-arrow-counterclockwise me-1"></i> Восстановить
                                </button>
                            }
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="bi bi-clock-history"></i>
                </div>
                <h3>Нет версий</h3>
                <p>Для этого файла пока нет сохраненных версий.</p>
                <button class="btn btn-primary" onclick="createManualVersion()">
                    <i class="bi bi-save me-2"></i> Создать первую версию
                </button>
            </div>
        }
    </div>
</div>

<!-- Модальное окно для создания версии -->
<div class="modal fade" id="createVersionModal" tabindex="-1" aria-labelledby="createVersionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createVersionModalLabel">Создать версию</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="versionComment" class="form-label">Комментарий к версии:</label>
                    <textarea id="versionComment" class="form-control" rows="3"
                              placeholder="Опишите изменения в этой версии..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="saveVersion()">Создать версию</button>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно для восстановления версии -->
<div class="modal fade" id="restoreVersionModal" tabindex="-1" aria-labelledby="restoreVersionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="restoreVersionModalLabel">Восстановить версию</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="restoreVersionInfo" class="mb-3"></p>
                <div class="mb-3">
                    <label for="restoreComment" class="form-label">Причина отката:</label>
                    <textarea id="restoreComment" class="form-control" rows="3"
                              placeholder="Опишите причину отката..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" onclick="confirmRestore()">Восстановить</button>
            </div>
        </div>
    </div>
</div>

<script>
    const fileId = '@Model.FileId';
    let selectedVersionId = null;
    let createVersionModal = null;
    let restoreVersionModal = null;

    document.addEventListener('DOMContentLoaded', function() {
        createVersionModal = new bootstrap.Modal(document.getElementById('createVersionModal'));
        restoreVersionModal = new bootstrap.Modal(document.getElementById('restoreVersionModal'));
    });

    async function downloadVersion(versionId) {
        window.location.href = `/api/files/${fileId}/versions/${versionId}/content`;
    }

    function openRestoreModal(versionId, versionNumber) {
        selectedVersionId = versionId;
        document.getElementById('restoreVersionInfo').textContent =
            `Восстановить версию ${versionNumber}? Текущая версия будет сохранена в истории.`;
        restoreVersionModal.show();
    }

    async function confirmRestore() {
        if (!selectedVersionId) return;

        const comment = document.getElementById('restoreComment').value;
        showLoader();

        try {
            const response = await fetch(`/api/files/${fileId}/versions/${selectedVersionId}/restore`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ comment })
            });

            if (response.ok) {
                showNotification('Версия успешно восстановлена', 'success');
                restoreVersionModal.hide();
                setTimeout(() => window.location.reload(), 1500);
            } else {
                const errorText = await response.text();
                showNotification(`Ошибка восстановления: ${errorText}`, 'error');
            }
        } catch (error) {
            console.error('Error restoring version:', error);
            showNotification('Ошибка восстановления версии', 'error');
        } finally {
            hideLoader();
        }
    }

    function createManualVersion() {
        document.getElementById('versionComment').value = '';
        createVersionModal.show();
    }

    async function saveVersion() {
        const comment = document.getElementById('versionComment').value;
        showLoader();

        try {
            const response = await fetch(`/api/files/${fileId}/versions`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ comment })
            });

            if (response.ok) {
                showNotification('Версия создана успешно', 'success');
                createVersionModal.hide();
                setTimeout(() => window.location.reload(), 1500);
            } else {
                const errorText = await response.text();
                showNotification(`Ошибка создания версии: ${errorText}`, 'error');
            }
        } catch (error) {
            console.error('Error creating version:', error);
            showNotification('Ошибка создания версии', 'error');
        } finally {
            hideLoader();
        }
    }
</script>

<style>
    /* Общие стили */
    .versions-container {
        max-width: 900px;
        margin: 0 auto;
        padding: 16px;
    }

    /* Заголовок */
    .versions-header {
        margin-bottom: 32px;
    }

    /* Временная шкала */
    .versions-timeline {
        position: relative;
        padding-left: 60px;
        margin-left: 20px;
    }

    .versions-line {
        position: absolute;
        left: 30px;
        top: 24px;
        bottom: 24px;
        width: 2px;
        background-color: #dee2e6;
    }

    /* Элементы версий */
    .version-item {
        position: relative;
        margin-bottom: 32px;
    }

    .version-badge {
        position: absolute;
        left: -60px;
        top: 8px;
        z-index: 2;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
    }

    .version-number {
        width: 40px;
        height: 40px;
        background-color: #f8f9fa;
        border: 2px solid #dee2e6;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 500;
        font-size: 14px;
        color: #495057;
    }

    .current-version .version-number {
        background-color: #0d6efd;
        border-color: #0d6efd;
        color: white;
    }

    .current-marker {
        background-color: #0d6efd;
        color: white;
        font-size: 10px;
        padding: 2px 6px;
        border-radius: 10px;
        white-space: nowrap;
    }

    /* Карточка версии */
    .version-card {
        background-color: white;
        border-radius: 8px;
        overflow: hidden;
    }

    .current-version .version-card {
        border-left: 3px solid #0d6efd;
    }

    .version-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        padding: 16px;
        border-bottom: 1px solid #f0f0f0;
    }

    .version-title {
        font-weight: 500;
        font-size: 16px;
        color: #212529;
    }

    .version-date {
        font-size: 13px;
        color: #6c757d;
        margin-top: 4px;
    }

    .version-user {
        font-size: 13px;
        color: #6c757d;
    }

    .version-comment {
        padding: 12px 16px;
        background-color: #f8f9fa;
        color: #495057;
        font-size: 14px;
        font-style: italic;
    }

    .version-details {
        padding: 12px 16px;
        font-size: 13px;
        color: #6c757d;
    }

    .version-actions {
        display: flex;
        justify-content: flex-end;
        gap: 8px;
        padding: 12px 16px;
        border-top: 1px solid #f0f0f0;
    }

    /* Пустое состояние */
    .empty-state {
        text-align: center;
        padding: 64px 24px;
        background-color: #fff;
        border-radius: 8px;
        border: 1px dashed #dee2e6;
    }

    .empty-icon {
        font-size: 48px;
        color: #dee2e6;
        margin-bottom: 16px;
    }

    .empty-state h3 {
        font-size: 18px;
        color: #495057;
        margin-bottom: 8px;
    }

    .empty-state p {
        color: #6c757d;
        margin-bottom: 24px;
        max-width: 400px;
        margin-left: auto;
        margin-right: auto;
    }

    /* Медиа-запросы */
    @@media (max-width: 576px) {
        .versions-container

    {
        padding: 12px;
    }

    .versions-timeline {
        padding-left: 40px;
        margin-left: 0;
    }

    .versions-line {
        left: 20px;
    }

    .version-badge {
        left: -40px;
    }

    .version-number {
        width: 32px;
        height: 32px;
        font-size: 12px;
    }

    .version-header {
        flex-direction: column;
    }

    .version-user {
        margin-top: 8px;
    }

    .version-actions {
        flex-direction: column;
    }

        .version-actions .btn {
            width: 100%;
        }

    }
</style>