@page
@model FileManager.Web.Pages.Files.UploadModel
@using System.Text.Json
@{
    ViewData["Title"] = "Загрузка файлов";
    var foldersJson = JsonSerializer.Serialize(Model.Folders,
        new JsonSerializerOptions { PropertyNamingPolicy = JsonNamingPolicy.CamelCase });
}

<div class="upload-container">
    <div class="card shadow-sm border-0">
        <div class="card-header bg-white">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <a href="/Files" class="btn btn-outline-secondary btn-sm me-3">
                        <i class="bi bi-arrow-left"></i>
                    </a>
                    <h5 class="mb-0">Загрузка файлов</h5>
                </div>
                <div>
                    <span class="badge bg-primary">@(Model.FolderId != Guid.Empty ? "Папка выбрана" : "Выберите папку")</span>
                </div>
            </div>
        </div>

        <div class="card-body">
            <form id="uploadForm" method="post" enctype="multipart/form-data">
                @Html.AntiForgeryToken()

                <!-- Выбор папки -->
                <div class="mb-4">
                    <label for="uploadFolderSelect" class="form-label">Папка назначения:</label>
                    <select id="uploadFolderSelect" name="FolderId" class="form-select">
                        <option value="" disabled selected>Выберите папку</option>
                    </select>
                </div>

                <!-- Зона перетаскивания файлов -->
                <div id="dropZone" class="drop-zone mb-4">
                    <div class="drop-zone-content">
                        <div class="drop-icon mb-3">
                            <i class="bi bi-cloud-arrow-up"></i>
                        </div>
                        <p>Перетащите файлы сюда или выберите через кнопку ниже</p>
                        <label class="btn btn-primary mt-2">
                            Выбрать файлы
                            <input type="file" id="fileInput" name="Files" class="d-none" multiple />
                        </label>
                    </div>
                </div>

                <!-- Список выбранных файлов -->
                <div id="filesList" class="files-list mb-4" style="display: none;">
                    <h6 class="mb-3">Выбранные файлы:</h6>
                    <div id="filesContainer" class="files-container"></div>
                </div>

                <!-- Комментарий -->
                <div class="mb-4" id="commentGroup" style="display: none;">
                    <label for="uploadComment" class="form-label">Комментарий к загрузке:</label>
                    <textarea id="uploadComment" name="Comment" class="form-control"
                              placeholder="Опишите что изменено или почему загружается..."></textarea>
                </div>

                <!-- Прогресс загрузки -->
                <div id="uploadProgress" class="upload-progress mb-4" style="display: none;">
                    <label class="form-label d-flex justify-content-between">
                        <span>Прогресс загрузки</span>
                        <span id="progressText">0%</span>
                    </label>
                    <div class="progress">
                        <div id="progressFill" class="progress-bar progress-bar-striped progress-bar-animated"
                             role="progressbar" style="width: 0%"></div>
                    </div>
                </div>

                <!-- Результаты загрузки -->
                <div id="uploadResults" class="upload-results mb-4" style="display: none;"></div>

                <!-- Кнопки действий -->
                <div class="d-flex justify-content-between">
                    <a href="/Files" class="btn btn-outline-secondary">Отмена</a>
                    <button type="button" id="uploadBtn" class="btn btn-primary" onclick="startUpload()">
                        <i class="bi bi-upload me-1"></i> Загрузить файлы
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    var selectedFiles = [];
    var availableFolders = @Html.Raw(foldersJson);
    var isUploading = false;

    async function initUploadPage() {
        await refreshCsrfToken();
        loadAvailableFolders('@Model.FolderId');
    }

    if (document.readyState !== 'loading') {
        initUploadPage();
    } else {
        document.addEventListener('DOMContentLoaded', initUploadPage);
    }

    async function refreshCsrfToken() {
        try {
            const response = await fetchWithProgress('/api/upload/token', { credentials: 'include' });
            if (response.ok) {
                const data = await response.json();
                const input = document.querySelector('input[name="__RequestVerificationToken"]');
                if (input && data.token) {
                    input.value = data.token;
                    return true;
                }
            }
            showNotification('Не удалось обновить токен безопасности. Пожалуйста, перезагрузите страницу.', 'error');
        } catch (err) {
            console.error('Token refresh error:', err);
            showNotification('Не удалось обновить токен безопасности. Пожалуйста, перезагрузите страницу.', 'error');
        }
        return false;
    }

    function getUploadModalToken() {
        return document.querySelector('input[name="__RequestVerificationToken"]')?.value;
    }

    function loadAvailableFolders(selectedId = null) {
        populateFoldersSelect(availableFolders);
        const select = document.getElementById('uploadFolderSelect');
        if (selectedId && [...select.options].some(o => o.value === selectedId)) {
            select.value = selectedId;
        } else if (select.options.length > 1) {
            select.selectedIndex = 1;
        }
        updateUploadButtonState();
    }

    function populateFoldersSelect(folders = availableFolders) {
        const select = document.getElementById('uploadFolderSelect');
        select.innerHTML = '<option value="" disabled>Выберите папку</option>';

        function addFolderOptions(items, level = 0) {
            items.forEach(folder => {
                const option = document.createElement('option');
                option.value = folder.id;
                option.textContent = '  '.repeat(level) + folder.name;
                select.appendChild(option);

                if (folder.children && folder.children.length > 0) {
                    addFolderOptions(folder.children.filter(child => child.type === 'folder'), level + 1);
                }
            });
        }

        addFolderOptions(folders);
    }

    document.getElementById('fileInput').addEventListener('change', function (e) {
        handleFiles(Array.from(e.target.files));
    });

    document.getElementById('uploadFolderSelect').addEventListener('change', updateUploadButtonState);

    const dropZone = document.getElementById('dropZone');

    dropZone.addEventListener('dragover', function (e) {
        e.preventDefault();
        e.stopPropagation();
        dropZone.classList.add('drag-over');
    });

    dropZone.addEventListener('dragleave', function (e) {
        e.preventDefault();
        e.stopPropagation();
        dropZone.classList.remove('drag-over');
    });

    dropZone.addEventListener('drop', function (e) {
        e.preventDefault();
        e.stopPropagation();
        dropZone.classList.remove('drag-over');

        const files = Array.from(e.dataTransfer.files);
        handleFiles(files);
    });

    async function handleFiles(files) {
        selectedFiles = files;

        updateUploadButtonState();

        if (files.length > 0) {
            document.getElementById('filesList').style.display = 'block';
            document.getElementById('commentGroup').style.display = 'block';

            try {
                await validateFiles(files);
                displaySelectedFiles(files);
            } finally {
                updateUploadButtonState();
            }
        }
    }

    async function validateFiles(files) {
        if (!await refreshCsrfToken()) return;
        const formData = new FormData();
        files.forEach(file => formData.append('files', file));
        const token = getUploadModalToken();
        const headers = token ? { 'RequestVerificationToken': token } : {};

        showLoader();
        try {
            const response = await fetch('/api/upload/validate', {
                method: 'POST',
                body: formData,
                credentials: 'include',
                headers
            });

            const contentType = response.headers.get('content-type') || '';
            if (response.ok && contentType.includes('application/json')) {
                const data = await response.json();
                updateFileValidationResults(data.results);
            } else {
                showNotification(`Ошибка валидации файлов (статус ${response.status})`, 'error');
            }
        } catch (error) {
            showNotification('Ошибка проверки файлов', 'error');
            console.error('Validation error:', error);
        } finally {
            hideLoader();
        }
    }

    function displaySelectedFiles(files) {
        const container = document.getElementById('filesContainer');
        container.innerHTML = '';

        files.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item card mb-2';
            fileItem.innerHTML = `
                <div class="card-body p-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="file-info d-flex align-items-center">
                            <div class="file-icon me-2">
                                <i class="${getFileIcon(file.name)}"></i>
                            </div>
                            <div>
                                <div class="file-name text-truncate">${file.name}</div>
                                <div class="file-size text-muted small">${formatFileSize(file.size)}</div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFile(${index})">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div class="mt-2" id="status-${index}">
                        <div class="progress">
                            <div class="progress-bar" id="progress-${index}" style="width: 0%"></div>
                        </div>
                        <div class="status-text small mt-1 text-center" id="status-text-${index}">Готов к загрузке</div>
                    </div>
                </div>
            `;
            container.appendChild(fileItem);
        });
    }

    function getFileIcon(fileName) {
        const ext = fileName.split('.').pop().toLowerCase();
        if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg'].includes(ext)) return 'bi bi-file-earmark-image';
        if (['doc', 'docx', 'odt', 'rtf'].includes(ext)) return 'bi bi-file-earmark-word';
        if (['xls', 'xlsx', 'ods'].includes(ext)) return 'bi bi-file-earmark-spreadsheet';
        if (['ppt', 'pptx', 'odp'].includes(ext)) return 'bi bi-file-earmark-slides';
        if (ext === 'pdf') return 'bi bi-file-earmark-pdf';
        if (['zip', 'rar', '7z', 'tar', 'gz'].includes(ext)) return 'bi bi-file-earmark-zip';
        if (['txt', 'md'].includes(ext)) return 'bi bi-file-earmark-text';
        return 'bi bi-file-earmark';
    }

    function updateFileValidationResults(results) {
        results.forEach((result, index) => {
            const statusText = document.getElementById(`status-text-${index}`);
            if (statusText) {
                statusText.className = 'status-text small mt-1 text-center';
                if (!result.isValid) {
                    statusText.textContent = `Ошибка: ${result.errors.join(', ')}`;
                    statusText.classList.add('text-danger');
                    statusText.closest('.file-item')?.classList.add('border-danger');
                } else if (result.warnings.length > 0) {
                    statusText.textContent = `Предупреждение: ${result.warnings.join(', ')}`;
                    statusText.classList.add('text-warning');
                } else {
                    statusText.textContent = `Готов к загрузке`;
                    statusText.classList.add('text-muted');
                }
            }
        });
    }

    function removeFile(index) {
        selectedFiles.splice(index, 1);
        displaySelectedFiles(selectedFiles);

        if (selectedFiles.length === 0) {
            document.getElementById('filesList').style.display = 'none';
            document.getElementById('commentGroup').style.display = 'none';
        }

        updateUploadButtonState();
    }

    async function startUpload() {
        const folderId = document.getElementById('uploadFolderSelect').value;
        const comment = document.getElementById('uploadComment').value;

        if (!folderId) {
            showNotification('Выберите папку назначения', 'error');
            return;
        }

        if (selectedFiles.length === 0) {
            showNotification('Выберите файлы для загрузки', 'error');
            return;
        }

        document.getElementById('uploadProgress').style.display = 'block';
        isUploading = true;
        updateUploadButtonState();
        document.getElementById('uploadBtn').disabled = true;

        const totalFiles = selectedFiles.length;
        const results = [];

        async function uploadNext(index) {
            if (index >= totalFiles) {
                isUploading = false;
                showUploadResults(results);
                return;
            }

            if (!await refreshCsrfToken()) {
                isUploading = false;
                hideLoader();
                showNotification('Не удалось обновить токен безопасности. Пожалуйста, перезагрузите страницу.', 'error');
                updateUploadButtonState();
                return;
            }

            const file = selectedFiles[index];
            const formData = new FormData();
            formData.append('files', file);
            formData.append('folderId', folderId);
            if (comment) formData.append('comment', comment);

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/api/upload');
            xhr.responseType = 'json';
            xhr.withCredentials = true;

            const token = getUploadModalToken();

            if (token) {
                xhr.setRequestHeader('RequestVerificationToken', token);
            }

            xhr.upload.onprogress = function (e) {
                if (e.lengthComputable) {
                    const percent = Math.round((e.loaded / e.total) * 100);
                    const progressEl = document.getElementById(`progress-${index}`);
                    const statusText = document.getElementById(`status-text-${index}`);
                    if (progressEl) progressEl.style.width = percent + '%';
                    if (statusText) {
                        statusText.textContent = percent + '%';
                        statusText.classList.remove('text-muted', 'text-danger', 'text-warning');
                        statusText.classList.add('text-primary');
                    }

                    const overall = Math.round(((index + e.loaded / e.total) / totalFiles) * 100);
                    document.getElementById('progressFill').style.width = overall + '%';
                    document.getElementById('progressText').textContent = overall + '%';
                }
            };

            xhr.onload = function () {
                const progressEl = document.getElementById(`progress-${index}`);
                const statusText = document.getElementById(`status-text-${index}`);
                if (progressEl) progressEl.style.width = '100%';

                const isJson = xhr.getResponseHeader('content-type')?.includes('application/json');
                if (xhr.status >= 200 && xhr.status < 300) {
                    const response = xhr.response;

                    if (isJson && response && response.results) {
                        const result = response.results[0];
                        results.push(result);
                        if (statusText) {
                            statusText.textContent = result.success ? 'Готово' : result.error;
                            statusText.classList.remove('text-muted', 'text-primary', 'text-warning');
                            statusText.classList.add(result.success ? 'text-success' : 'text-danger');

                            if (progressEl && result.success) {
                                progressEl.classList.remove('progress-bar-striped', 'progress-bar-animated');
                                progressEl.classList.add('bg-success');
                            }
                        }
                    } else {
                        const error = isJson ? 'Некорректный ответ сервера' : `Сервер вернул не-JSON/HTML (статус ${xhr.status})`;
                        results.push({ success: false, fileName: file.name, error });
                        if (statusText) {
                            statusText.textContent = error;
                            statusText.classList.remove('text-muted', 'text-primary', 'text-warning');
                            statusText.classList.add('text-danger');
                        }
                    }
                } else {
                    const error = `Ошибка ${xhr.status}`;
                    results.push({ success: false, fileName: file.name, error });
                    if (statusText) {
                        statusText.textContent = error;
                        statusText.classList.remove('text-muted', 'text-primary', 'text-warning');
                        statusText.classList.add('text-danger');
                    }
                }

                uploadNext(index + 1);
            };

            xhr.onerror = function () {
                const statusText = document.getElementById(`status-text-${index}`);
                const progressEl = document.getElementById(`progress-${index}`);
                if (progressEl) progressEl.style.width = '100%';
                const error = 'Ошибка соединения';
                results.push({ success: false, fileName: file.name, error });
                if (statusText) {
                    statusText.textContent = error;
                    statusText.classList.remove('text-muted', 'text-primary', 'text-warning');
                    statusText.classList.add('text-danger');
                }
                uploadNext(index + 1);
            };

            xhr.ontimeout = function () {
                isUploading = false;
                hideLoader();
                showNotification('Время ожидания истекло, попробуйте ещё раз', 'error');
                updateUploadButtonState();
            };

            xhr.send(formData);
        }

        uploadNext(0);
    }

    function showUploadResults(results) {
        const resultsContainer = document.getElementById('uploadResults');
        resultsContainer.style.display = 'block';
        resultsContainer.innerHTML = '<h6 class="mb-3">Результаты загрузки:</h6>';

        let successCount = 0;
        let errorCount = 0;

        results.forEach(result => {
            const resultItem = document.createElement('div');
            resultItem.className = `alert ${result.success ? 'alert-success' : 'alert-danger'} d-flex align-items-center mb-2`;

            if (result.success) {
                successCount++;
                resultItem.innerHTML = `
                    <i class="bi bi-check-circle me-2"></i>
                    <div>${result.fileName} - загружен успешно</div>
                `;
            } else {
                errorCount++;
                resultItem.innerHTML = `
                    <i class="bi bi-exclamation-circle me-2"></i>
                    <div>${result.fileName} - ${result.error}</div>
                `;
            }

            resultsContainer.appendChild(resultItem);
        });

        const summary = document.createElement('div');
        summary.className = 'mt-3 d-flex align-items-center justify-content-between';
        summary.innerHTML = `
            <div><strong>Итого:</strong> ${successCount} успешно, ${errorCount} с ошибками</div>
            ${successCount > 0 ? '<button class="btn btn-success btn-sm" onclick="reloadPage()">Перейти к файлам</button>' : ''}
        `;
        resultsContainer.appendChild(summary);

        selectedFiles = [];
        document.getElementById('filesList').style.display = 'none';
        document.getElementById('commentGroup').style.display = 'none';

        const progressContainer = document.getElementById('uploadProgress');
        progressContainer.style.display = 'none';
        document.getElementById('progressFill').style.width = '0%';
        document.getElementById('progressText').textContent = '0%';

        updateUploadButtonState();
    }

    function updateUploadButtonState() {
        const btn = document.getElementById('uploadBtn');
        const folderId = document.getElementById('uploadFolderSelect')?.value;
        btn.disabled = isUploading || !folderId || selectedFiles.length === 0;
    }

    function formatFileSize(bytes) {
        if (bytes < 1024) return bytes + ' Б';
        if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' КБ';
        if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)).toFixed(1) + ' МБ';
        return (bytes / (1024 * 1024 * 1024)).toFixed(1) + ' ГБ';
    }

    function reloadPage() {
        window.location.href = '/Files';
    }
</script>

<style>
    .upload-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 16px;
    }

    .drop-zone {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        background-color: #f8f9fa;
        padding: 40px 20px;
        text-align: center;
        transition: all 0.3s ease;
    }

        .drop-zone.drag-over {
            border-color: #0d6efd;
            background-color: rgba(13, 110, 253, 0.05);
        }

    .drop-icon {
        font-size: 48px;
        color: #adb5bd;
    }

    .files-container {
        max-height: 400px;
        overflow-y: auto;
    }

    .file-name {
        font-weight: 500;
        max-width: 250px;
    }

    .file-icon {
        font-size: 24px;
        color: #6c757d;
    }

    .status-text {
        font-size: 12px;
    }

    @@media (max-width: 576px) {
        .drop-zone

    {
        padding: 20px 10px;
    }

    .file-name {
        max-width: 150px;
    }

    }
</style>