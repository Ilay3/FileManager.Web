@model FileManager.Application.DTOs.TreeNodeDto

@if (Model.Children.Any())
{
    <div class="tiles-list">
    @foreach (var item in Model.Children)
    {
        <div class="tile-row explorer-item" data-type="@item.Type" data-id="@item.Id" data-name="@item.Name">
            <div class="tile-icon">
                @if (item.Type == "folder")
                {
                    <i class="bi bi-folder"></i>
                }
                else
                {
                    @Html.Raw(GetFileIcon(item.Extension))
                }
                @if (item.IsNetworkAvailable)
                {
                    <i class="bi bi-cloud-check network-icon"></i>
                }
            </div>
            <div class="tile-body">
                <div class="tile-name">
                    <span>@item.Name</span>
                </div>
                <div class="tile-meta">
                    @(item.Type == "file" && item.SizeBytes.HasValue ? FormatSize(item.SizeBytes.Value) : "-") · @((item.UpdatedAt ?? item.CreatedAt).ToString("dd.MM.yyyy HH:mm")) · @item.UploadedByName
                </div>
            </div>
        </div>
    }
    </div>
}
else
{
    <div class="empty-state">
        <div style="font-size: 64px; margin-bottom: 20px;"><i class="bi bi-folder"></i></div>
        <h3>Папка пуста</h3>
        <p style="color: #999; margin-bottom: 30px;">В данной папке нет файлов или подпапок</p>
    </div>
}

@functions {
    private string GetFileIcon(string? extension)
    {
        var ext = extension?.ToLowerInvariant();
        return ext switch
        {
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" or ".svg" => "<i class='bi bi-file-earmark-image'></i>",
            ".pdf" => "<i class='bi bi-file-earmark-pdf'></i>",
            ".zip" or ".rar" or ".7z" => "<i class='bi bi-file-earmark-zip'></i>",
            ".mp3" or ".wav" or ".flac" => "<i class='bi bi-file-earmark-music'></i>",
            ".mp4" or ".avi" or ".mov" or ".mkv" => "<i class='bi bi-file-earmark-play'></i>",
            ".doc" or ".docx" => "<i class='bi bi-file-earmark-word'></i>",
            ".xls" or ".xlsx" => "<i class='bi bi-file-earmark-excel'></i>",
            ".ppt" or ".pptx" => "<i class='bi bi-file-earmark-ppt'></i>",
            ".txt" or ".md" => "<i class='bi bi-file-earmark-text'></i>",
            _ => "<i class='bi bi-file-earmark'></i>"
        };
    }

    private string FormatSize(long size)
    {
        string[] suffix = { "Б", "КБ", "МБ", "ГБ", "ТБ" };
        double len = size;
        int order = 0;
        while (len >= 1024 && order < suffix.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {suffix[order]}";
    }
}
