@page "/Files"
@model FileManager.Web.Pages.Files.IndexModel
@using FileManager.Domain.Enums
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@{
    ViewData["Title"] = "Документы";
}

<div class="files-wrapper fade-in-up">
    <!-- Хлебные крошки -->
    @if (Model.Breadcrumbs.Any())
    {
        <div class="breadcrumbs">
            @for (int i = 0; i < Model.Breadcrumbs.Count; i++)
            {
                var breadcrumb = Model.Breadcrumbs[i];
                if (i == Model.Breadcrumbs.Count - 1)
                {
                    <span class="breadcrumb-current">
                        <i class="@breadcrumb.Icon"></i>
                        @breadcrumb.Name
                    </span>
                }
                else
                {
                    <a href="?folderId=@breadcrumb.Id&view=@Model.ViewMode" class="breadcrumb-link">
                        <i class="@breadcrumb.Icon"></i>
                        @breadcrumb.Name
                    </a>
                    <span class="breadcrumb-separator">/</span>
                }
            }
        </div>
    }

    <!-- Панель поиска и инструментов -->
    <div class="search-bar">
        <div class="search-container">
            <input type="text" 
                   id="searchInput" 
                   placeholder="Поиск файлов и папок..." 
                   value="@Model.SearchRequest.SearchTerm"
                   class="search-input" />
            <button type="button" class="btn btn-icon" onclick="toggleAdvanced()" title="Фильтры">
                <i class="bi bi-funnel"></i>
            </button>
        </div>

        <div class="toolbar-actions">
            <button type="button" class="btn btn-primary" onclick="openUploadModal('@Model.CurrentFolderId')" title="Загрузить файлы">
                <i class="bi bi-upload"></i>
                <span class="btn-text">Загрузить</span>
            </button>
            
            <button type="button" class="btn btn-secondary" onclick="openCreateFolderModal('@Model.CurrentFolderId')" title="Создать папку">
                <i class="bi bi-folder-plus"></i>
            </button>

            <div class="view-toggle">
                <button id="viewList" 
                        class="btn btn-icon @(Model.ViewMode == "list" ? "active" : "")" 
                        onclick="changeView('list')" 
                        title="Список">
                    <i class="bi bi-list"></i>
                </button>
                <button id="viewGrid" 
                        class="btn btn-icon @(Model.ViewMode == "grid" ? "active" : "")" 
                        onclick="changeView('grid')" 
                        title="Сетка">
                    <i class="bi bi-grid"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Расширенные фильтры -->
    <div id="advancedFilters" class="advanced-filters" style="display:none">
        <div class="filters-grid">
            <div class="filter-group">
                <label class="filter-label">Тип файла</label>
                <select id="filterType" class="form-select">
                    <option value="">Все типы</option>
                    @foreach (FileType t in Enum.GetValues(typeof(FileType)))
                    {
                        <option value="@t" selected="@(Model.SearchRequest.FileType == t ? "selected" : null)">@t</option>
                    }
                </select>
            </div>
            
            <div class="filter-group">
                <label class="filter-label">Дата создания</label>
                <div class="date-range">
                    <input type="date" id="dateFrom" class="form-input" value="@Model.SearchRequest.DateFrom?.ToString("yyyy-MM-dd")" />
                    <span>—</span>
                    <input type="date" id="dateTo" class="form-input" value="@Model.SearchRequest.DateTo?.ToString("yyyy-MM-dd")" />
                </div>
            </div>
            
            <div class="filter-group">
                <div class="checkbox-group">
                    <label class="checkbox-label">
                        <input type="checkbox" id="onlyMyFiles" @(Model.SearchRequest.OnlyMyFiles ? "checked" : "") />
                        <span>Только мои файлы</span>
                    </label>
                </div>
            </div>
        </div>
        
        <div class="filters-actions">
            <button type="button" class="btn btn-primary" onclick="filesManager.applyFilters()">
                Применить фильтры
            </button>
            <button type="button" class="btn btn-secondary" onclick="resetFilters()">
                Сбросить
            </button>
        </div>
    </div>

    <!-- Область контента -->
    <div class="content-area">
        @if (Model.ViewMode == "grid")
        {
            <div class="grid-view">
                @await Html.PartialAsync("_FilesGrid", Model.GridItems)
            </div>
        }
        else
        {
            <div class="list-view">
                @if (Model.CurrentFolderContents != null)
                {
                    @await Html.PartialAsync("_ExplorerList", Model.CurrentFolderContents)
                }
            </div>
        }
    </div>

    <!-- Пагинация -->
    @if (Model.ViewMode == "grid" && Model.FilesResult.TotalPages > 1)
    {
        <div class="pagination-container">
            <div class="pagination">
                @if (Model.FilesResult.HasPreviousPage)
                {
                    <a href="?page=@(Model.FilesResult.CurrentPage - 1)&folderId=@Model.CurrentFolderId&view=@Model.ViewMode" 
                       class="pagination-btn pagination-prev">
                        <i class="bi bi-chevron-left"></i>
                        Предыдущая
                    </a>
                }

                <div class="pagination-info">
                    <span class="page-current">@Model.FilesResult.CurrentPage</span>
                    <span class="page-separator">из</span>
                    <span class="page-total">@Model.FilesResult.TotalPages</span>
                    <span class="items-count">(всего: @Model.FilesResult.TotalCount элементов)</span>
                </div>

                @if (Model.FilesResult.HasNextPage)
                {
                    <a href="?page=@(Model.FilesResult.CurrentPage + 1)&folderId=@Model.CurrentFolderId&view=@Model.ViewMode" 
                       class="pagination-btn pagination-next">
                        Следующая
                        <i class="bi bi-chevron-right"></i>
                    </a>
                }
            </div>
        </div>
    }
</div>

<!-- Подключаемые модальные окна -->
<!-- Модальные окна теперь подключаются глобально в макете -->

<style>
    /* Дополнительные стили для страницы файлов */
    .search-container {
        display: flex;
        align-items: center;
        flex: 1;
        gap: 8px;
    }

    .search-input {
        flex: 1;
        max-width: 400px;
    }

    .toolbar-actions {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .btn-text {
        display: none;
    }

    @@media (min-width: 768px) {
        .btn-text {
            display: inline;
        }
    }

    /* Расширенные фильтры */
    .advanced-filters {
        padding: 16px 20px;
        border-bottom: 1px solid var(--border-light);
        background: var(--surface-secondary);
    }

    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 16px;
        margin-bottom: 16px;
    }

    .filter-group {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .filter-label {
        font-size: 13px;
        font-weight: 500;
        color: var(--text-secondary);
    }

    .date-range {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .date-range input {
        flex: 1;
    }

    .checkbox-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
        cursor: pointer;
    }

    .checkbox-label input[type="checkbox"] {
        width: auto;
    }

    .filters-actions {
        display: flex;
        gap: 8px;
    }

    /* Пагинация */
    .pagination-container {
        padding: 20px;
        border-top: 1px solid var(--border-light);
    }

    .pagination {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 16px;
    }

    .pagination-btn {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 8px 16px;
        background: var(--primary);
        color: white;
        text-decoration: none;
        border-radius: var(--radius-sm);
        font-weight: 500;
        transition: all 0.15s ease;
    }

    .pagination-btn:hover {
        background: var(--primary-hover);
        transform: translateY(-1px);
    }

    .pagination-info {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 14px;
        color: var(--text-secondary);
    }

    .page-current {
        font-weight: 600;
        color: var(--text);
    }

    .items-count {
        font-size: 12px;
        color: var(--text-muted);
    }

    /* Breadcrumbs */
    .breadcrumb-link {
        color: var(--primary);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        transition: color 0.15s ease;
    }

    .breadcrumb-link:hover {
        color: var(--primary-hover);
    }

    .breadcrumb-current {
        color: var(--text);
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-weight: 500;
    }

    .breadcrumb-separator {
        margin: 0 8px;
        color: var(--text-muted);
    }
</style>

<script>
    function resetFilters() {
        document.getElementById('filterType').value = '';
        document.getElementById('dateFrom').value = '';
        document.getElementById('dateTo').value = '';
        document.getElementById('onlyMyFiles').checked = false;
        
        if (typeof filesManager !== 'undefined') {
            filesManager.applyFilters();
        }
    }

    // Анимация появления элементов при загрузке
    document.addEventListener('DOMContentLoaded', function() {
        const items = document.querySelectorAll('.file-card, .tile-row');
        items.forEach((item, index) => {
            item.style.animationDelay = `${index * 0.05}s`;
            item.classList.add('fade-in-up');
        });
    });
</script>