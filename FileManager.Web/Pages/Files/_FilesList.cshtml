@model FileManager.Application.DTOs.SearchResultDto<FileManager.Application.DTOs.FileDto>

@if (Model.Items.Any())
{
    <div class="sort-controls">
        <span>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
        <a href="javascript:void(0)" onclick="sortBy('name')" class="sort-link">–ü–æ –∏–º–µ–Ω–∏</a>
        <a href="javascript:void(0)" onclick="sortBy('date')" class="sort-link">–ü–æ –¥–∞—Ç–µ</a>
        <a href="javascript:void(0)" onclick="sortBy('size')" class="sort-link">–ü–æ —Ä–∞–∑–º–µ—Ä—É</a>
        <a href="javascript:void(0)" onclick="sortBy('type')" class="sort-link">–ü–æ —Ç–∏–ø—É</a>
    </div>

    <table class="files-table">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll" /></th>
                <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                <th>–†–∞–∑–º–µ—Ä</th>
                <th>–ò–∑–º–µ–Ω–µ–Ω</th>
                <th>–ê–≤—Ç–æ—Ä</th>
                <th>–ü–∞–ø–∫–∞</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in Model.Items)
            {
                <tr class="explorer-item" data-type="file" data-id="@file.Id" data-name="@file.Name">
                    <td><input type="checkbox" class="file-select" data-file-id="@file.Id" /></td>
                    <td>
                        <span class="file-icon"><i class="@file.FileIconClass"></i></span>
                        <strong>@file.Name</strong>
                        @if (file.IsNetworkAvailable)
                        {
                            <i class="bi bi-cloud-check network-icon"></i>
                        }
                        @if (!string.IsNullOrEmpty(file.Tags))
                        {
                            <div class="tags">
                                @foreach (var tag in file.Tags.Split(','))
                                {
                                    <span class="tag">@tag.Trim()</span>
                                }
                            </div>
                        }
                    </td>
                    <td>@file.FormattedSize</td>
                    <td>@(file.UpdatedAt?.ToString("dd.MM.yyyy HH:mm") ?? file.CreatedAt.ToString("dd.MM.yyyy HH:mm"))</td>
                    <td>@file.UploadedByName</td>
                    <td>
                        <a href="?folderId=@file.FolderId"><i class="bi bi-folder"></i> @file.FolderName</a>
                    </td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn btn-small" onclick="viewFile('@file.Id')" title="–ü—Ä–æ—Å–º–æ—Ç—Ä"><i class="bi bi-eye"></i></button>
                            <button class="btn btn-small" onclick="downloadFile('@file.Id')" title="–°–∫–∞—á–∞—Ç—å"><i class="bi bi-download"></i></button>
                            <button class="btn btn-small" onclick="deleteFile('@file.Id', '@file.Name')" title="–£–¥–∞–ª–∏—Ç—å"><i class="bi bi-trash"></i></button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="empty-state">
        <div style="font-size: 64px; margin-bottom: 20px;"><i class="bi bi-file-earmark"></i></div>
        <h3>–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
        <p style="color: #999; margin-bottom: 30px;">
            @if (!string.IsNullOrEmpty(ViewContext.HttpContext.Request.Query["SearchRequest.SearchTerm"]))
            {
                <span>–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.</span>
            }
            else
            {
                <span>–í –¥–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.</span>
            }
        </p>
        @{ var currentFolder = ViewContext.HttpContext.Request.Query["folderId"].ToString(); }
        <button class="btn btn-primary" onclick="openUploadModal('@currentFolder')">üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</button>
    </div>
}

<script>
    function sortBy(field) {
        const params = new URLSearchParams(window.location.search);
        const currentSort = params.get('SearchRequest.SortBy');
        const currentDirection = params.get('SearchRequest.SortDirection') || 'asc';
        const newDirection = (currentSort === field && currentDirection === 'asc') ? 'desc' : 'asc';
        params.set('SearchRequest.SortBy', field);
        params.set('SearchRequest.SortDirection', newDirection);
        params.set('SearchRequest.Page', '1');
        window.location.search = params.toString();
    }
</script>

