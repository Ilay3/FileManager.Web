<div id="uploadModal" class="modal modal-exit" style="display: none;">
    @Html.AntiForgeryToken()
    <div class="modal-content">
        <div class="modal-header">
            <h3>Загрузка файлов</h3>
        </div>

        <div class="modal-body">
            <!-- Выбор папки -->
            <div class="form-group">
                <label for="uploadFolderSelect">Папка назначения:</label>
                <select id="uploadFolderSelect" class="form-select">
                    <option value="" disabled selected>Выберите папку</option>
                </select>
            </div>

            <!-- Выбор файлов -->
            <div id="dropZone" class="drop-zone">
                <div class="drop-zone-content">
                    <p>Перетащите файлы сюда или выберите их через форму ниже</p>
                    <input type="file" id="fileInput" class="form-control" multiple />
                </div>
            </div>

            <!-- Список выбранных файлов -->
            <div id="filesList" class="files-list" style="display: none;">
                <h4>Выбранные файлы:</h4>
                <div id="filesContainer"></div>
            </div>

            <!-- Комментарий -->
            <div class="form-group" id="commentGroup" style="display: none;">
                <label for="uploadComment">Комментарий к загрузке:</label>
                <textarea id="uploadComment" class="form-textarea" placeholder="Опишите что изменено или почему загружается..."></textarea>
            </div>

            <!-- Прогресс загрузки -->
            <div id="uploadProgress" class="upload-progress" style="display: none;">
                <div class="progress-bar">
                    <div id="progressFill" class="progress-fill"></div>
                </div>
                <div id="progressText" class="progress-text">0%</div>
            </div>

            <!-- Результаты загрузки -->
            <div id="uploadResults" class="upload-results" style="display: none;"></div>
        </div>

        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeUploadModal()">Отмена</button>
            <button type="button" id="uploadBtn" class="btn btn-primary" onclick="startUpload()" disabled>
                Загрузить файлы
            </button>
        </div>
    </div>
</div>

<script>
    window.selectedFiles = window.selectedFiles || [];
    window.availableFolders = window.availableFolders || [];

    // Открытие модального окна
    async function openUploadModal(folderId = null) {
        // Если папка не указана явно, используем текущую папку из менеджера
        if (!folderId && window.filesManager) {
            folderId = filesManager.currentFolderId;
        }

        const modal = document.getElementById('uploadModal');
        modal.style.display = 'flex';
        setTimeout(() => {
            modal.classList.remove('modal-exit');
            modal.classList.add('modal-enter');
        }, 10);
        await loadAvailableFolders(folderId);
    }

    // Закрытие модального окна
    function closeUploadModal() {
        const modal = document.getElementById('uploadModal');
        modal.classList.remove('modal-enter');
        modal.classList.add('modal-exit');
        setTimeout(() => {
            modal.style.display = 'none';
            resetUploadForm();
        }, 300);
    }

    // Загрузка доступных папок
    async function loadAvailableFolders(selectedId = null) {
        try {
            const response = await fetch('/api/upload/folders', {
                credentials: 'include'
            });
            if (response.ok) {
                availableFolders = await response.json();
                populateFoldersSelect(availableFolders);
                const select = document.getElementById('uploadFolderSelect');
                if (selectedId && [...select.options].some(o => o.value === selectedId)) {
                    select.value = selectedId;
                } else if (select.options.length > 1) {
                    select.selectedIndex = 1;
                }
                updateUploadButtonState();
            } else {
                console.error('Ошибка загрузки папок:', response.statusText || response.status);
                populateFoldersSelect([]);
                updateUploadButtonState();
            }
        } catch (error) {
            console.error('Error loading folders:', error);
            populateFoldersSelect([]);
            updateUploadButtonState();
        }
    }

    // Заполнение селекта папок
    function populateFoldersSelect(folders = availableFolders) {
        const select = document.getElementById('uploadFolderSelect');
        select.innerHTML = '<option value="" disabled>Выберите папку</option>';

        function addFolderOptions(items, level = 0) {
            items.forEach(folder => {
                const option = document.createElement('option');
                option.value = folder.id;
                option.textContent = '  '.repeat(level) + folder.name;
                select.appendChild(option);

                if (folder.children && folder.children.length > 0) {
                    addFolderOptions(folder.children.filter(child => child.type === 'folder'), level + 1);
                }
            });
        }

        addFolderOptions(folders);
    }

    // Обработка выбора файлов
    document.getElementById('fileInput').addEventListener('change', function(e) {
        handleFiles(Array.from(e.target.files));
    });

    // Изменение выбранной папки
    document.getElementById('uploadFolderSelect').addEventListener('change', updateUploadButtonState);

    // Drag & Drop обработчики
    const dropZone = document.getElementById('dropZone');

    dropZone.addEventListener('dragover', function(e) {
        e.preventDefault();
        e.stopPropagation();
        dropZone.classList.add('drag-over');
    });

    dropZone.addEventListener('dragleave', function(e) {
        e.preventDefault();
        e.stopPropagation();
        dropZone.classList.remove('drag-over');
    });

    dropZone.addEventListener('drop', function(e) {
        e.preventDefault();
        e.stopPropagation();
        dropZone.classList.remove('drag-over');

        const files = Array.from(e.dataTransfer.files);
        handleFiles(files);
    });

    // Обработка выбранных файлов
    async function handleFiles(files) {
        selectedFiles = files;

        // Обновляем состояние кнопки сразу, чтобы разблокировать загрузку
        updateUploadButtonState();

        if (files.length > 0) {
            // Показываем список файлов и комментарий
            document.getElementById('filesList').style.display = 'block';
            document.getElementById('commentGroup').style.display = 'block';

            try {
                // Валидируем файлы
                await validateFiles(files);

                // Отображаем файлы
                displaySelectedFiles(files);
            } finally {
                // Повторно проверяем доступность кнопки
                updateUploadButtonState();
            }
        }
    }

    // Валидация файлов
    async function validateFiles(files) {
        const formData = new FormData();
        files.forEach(file => formData.append('files', file));

        try {
            const response = await fetch('/api/upload/validate', {
                method: 'POST',
                body: formData,
                credentials: 'include'
            });

            if (response.ok) {
                const data = await response.json();
                updateFileValidationResults(data.results);
            }
        } catch (error) {
            console.error('Validation error:', error);
        }
    }

    // Отображение списка файлов
    function displaySelectedFiles(files) {
        const container = document.getElementById('filesContainer');
        container.innerHTML = '';

        files.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <span class="file-name">${file.name}</span>
                    <span class="file-size">${formatFileSize(file.size)}</span>
                </div>
                <div class="file-status" id="status-${index}">
                    <div class="progress-bar"><div class="progress-fill" id="progress-${index}"></div></div>
                    <span class="status-text" id="status-text-${index}">Готов к загрузке</span>
                </div>
                <button type="button" class="btn btn-danger btn-sm" onclick="removeFile(${index})">
                    Удалить
                </button>
            `;
            container.appendChild(fileItem);
        });
    }

    // Обновление результатов валидации
    function updateFileValidationResults(results) {
        results.forEach((result, index) => {
            const statusText = document.getElementById(`status-text-${index}`);
            if (statusText) {
                statusText.className = 'status-text';
                if (!result.isValid) {
                    statusText.textContent = `Ошибка: ${result.errors.join(', ')}`;
                    statusText.classList.add('status-error');
                    statusText.closest('.file-item')?.classList.add('file-invalid');
                } else if (result.warnings.length > 0) {
                    statusText.textContent = `Предупреждение: ${result.warnings.join(', ')}`;
                    statusText.classList.add('status-warning');
                }
            }
        });
    }

    // Удаление файла из списка
    function removeFile(index) {
        selectedFiles.splice(index, 1);
        displaySelectedFiles(selectedFiles);

        if (selectedFiles.length === 0) {
            document.getElementById('filesList').style.display = 'none';
            document.getElementById('commentGroup').style.display = 'none';
        }

        updateUploadButtonState();
    }

    // Начало загрузки
    function startUpload() {
        if (selectedFiles.length === 0) return;

        const folderId = document.getElementById('uploadFolderSelect').value;
        const comment = document.getElementById('uploadComment').value;

        if (!folderId) {
            alert('Пожалуйста, выберите папку для загрузки.');
            return;
        }

        document.getElementById('uploadProgress').style.display = 'block';
        document.getElementById('uploadBtn').disabled = true;

        const totalFiles = selectedFiles.length;
        const results = [];

        function uploadNext(index) {
            if (index >= totalFiles) {
                showUploadResults(results);
                return;
            }

            const file = selectedFiles[index];
            const formData = new FormData();
            formData.append('files', file);
            formData.append('folderId', folderId);
            if (comment) formData.append('comment', comment);

            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/api/upload');
            xhr.withCredentials = true;
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (token) {
                xhr.setRequestHeader('RequestVerificationToken', token);
            }

            xhr.upload.onprogress = function (e) {
                if (e.lengthComputable) {
                    const percent = Math.round((e.loaded / e.total) * 100);
                    const progressEl = document.getElementById(`progress-${index}`);
                    const statusText = document.getElementById(`status-text-${index}`);
                    if (progressEl) progressEl.style.width = percent + '%';
                    if (statusText) statusText.textContent = percent + '%';

                    const overall = Math.round(((index + e.loaded / e.total) / totalFiles) * 100);
                    document.getElementById('progressFill').style.width = overall + '%';
                    document.getElementById('progressText').textContent = overall + '%';
                }
            };

            xhr.onload = function () {
                const progressEl = document.getElementById(`progress-${index}`);
                const statusText = document.getElementById(`status-text-${index}`);
                if (progressEl) progressEl.style.width = '100%';

                if (xhr.status >= 200 && xhr.status < 300) {
                    const response = JSON.parse(xhr.responseText);
                    const result = response.results[0];
                    results.push(result);
                    if (statusText) {
                        statusText.textContent = result.success ? 'Готово' : result.error;
                        if (!result.success) statusText.classList.add('status-error');
                    }
                } else {
                    const error = `Ошибка ${xhr.status}`;
                    results.push({ success: false, fileName: file.name, error });
                    if (statusText) {
                        statusText.textContent = error;
                        statusText.classList.add('status-error');
                    }
                }

                uploadNext(index + 1);
            };

            xhr.onerror = function () {
                const statusText = document.getElementById(`status-text-${index}`);
                const progressEl = document.getElementById(`progress-${index}`);
                if (progressEl) progressEl.style.width = '100%';
                const error = 'Ошибка соединения';
                results.push({ success: false, fileName: file.name, error });
                if (statusText) {
                    statusText.textContent = error;
                    statusText.classList.add('status-error');
                }
                uploadNext(index + 1);
            };

            xhr.send(formData);
        }

        uploadNext(0);
    }

    // Отображение результатов загрузки
    function showUploadResults(results) {
        document.getElementById('uploadProgress').style.display = 'none';

        const resultsContainer = document.getElementById('uploadResults');
        resultsContainer.style.display = 'block';
        resultsContainer.innerHTML = '<h4>Результаты загрузки:</h4>';

        let successCount = 0;
        let errorCount = 0;

        results.forEach(result => {
            const resultItem = document.createElement('div');
            resultItem.className = `result-item ${result.success ? 'success' : 'error'}`;

            if (result.success) {
                successCount++;
                resultItem.innerHTML = `
                    <span class="result-icon">✅</span>
                    <span class="result-text">${result.fileName} - загружен успешно</span>
                `;
            } else {
                errorCount++;
                resultItem.innerHTML = `
                    <span class="result-icon">❌</span>
                    <span class="result-text">${result.fileName} - ${result.error}</span>
                `;
            }

            resultsContainer.appendChild(resultItem);
        });

        // Показываем итоговую статистику
        const summary = document.createElement('div');
        summary.className = 'upload-summary';
        summary.innerHTML = `
            <p><strong>Итого:</strong> ${successCount} успешно, ${errorCount} с ошибками</p>
            ${successCount > 0 ? '<button class="btn btn-primary" onclick="reloadPage()">Обновить страницу</button>' : ''}
        `;
        resultsContainer.appendChild(summary);
        updateUploadButtonState();
    }

    // Отображение ошибки загрузки
    function showUploadError(message) {
        document.getElementById('uploadProgress').style.display = 'none';
        updateUploadButtonState();

        const resultsContainer = document.getElementById('uploadResults');
        resultsContainer.style.display = 'block';
        resultsContainer.innerHTML = `
            <div class="result-item error">
                <span class="result-icon">❌</span>
                <span class="result-text">${message}</span>
            </div>
        `;
    }

    // Сброс формы
    function resetUploadForm() {
        selectedFiles = [];
        document.getElementById('fileInput').value = '';
        document.getElementById('uploadComment').value = '';
        const folderSelect = document.getElementById('uploadFolderSelect');
        folderSelect.innerHTML = '<option value="" disabled selected>Выберите папку</option>';
        document.getElementById('filesList').style.display = 'none';
        document.getElementById('commentGroup').style.display = 'none';
        document.getElementById('uploadProgress').style.display = 'none';
        document.getElementById('uploadResults').style.display = 'none';
        updateUploadButtonState();
    }

    // Состояние кнопки загрузки
    function updateUploadButtonState() {
        const hasFiles = selectedFiles.length > 0;
        const folderSelected = document.getElementById('uploadFolderSelect').value;
        const btn = document.getElementById('uploadBtn');
        btn.disabled = !(hasFiles && folderSelected);
    }

    // Форматирование размера файла
    function formatFileSize(bytes) {
        if (bytes < 1024) return bytes + ' Б';
        if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' КБ';
        if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)).toFixed(1) + ' МБ';
        return (bytes / (1024 * 1024 * 1024)).toFixed(1) + ' ГБ';
    }

    // Перезагрузка страницы после успешной загрузки
    function reloadPage() {
        window.location.reload();
    }
</script>