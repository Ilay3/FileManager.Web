@model IEnumerable<FileManager.Application.DTOs.TreeNodeDto>
@using System.Linq
@using FileManager.Application.DTOs

@{
    var search = ViewData["SearchRequest"] as SearchRequestDto;
}

@if (Model.Any())
{
    <div class="sort-controls">
        <span>Сортировка:</span>
        <a href="javascript:void(0)" onclick="sortBy('name')" class="sort-link @(search?.SortBy == "name" ? "active" : "")">
            По имени@(search?.SortBy == "name" ? (search?.SortDirection == "asc" ? " ↑" : " ↓") : "")</a>
        <a href="javascript:void(0)" onclick="sortBy('date')" class="sort-link @(search?.SortBy == "date" ? "active" : "")">
            По дате@(search?.SortBy == "date" ? (search?.SortDirection == "asc" ? " ↑" : " ↓") : "")</a>
        <a href="javascript:void(0)" onclick="sortBy('size')" class="sort-link @(search?.SortBy == "size" ? "active" : "")">
            По размеру@(search?.SortBy == "size" ? (search?.SortDirection == "asc" ? " ↑" : " ↓") : "")</a>
        <a href="javascript:void(0)" onclick="sortBy('type')" class="sort-link @(search?.SortBy == "type" ? "active" : "")">
            По типу@(search?.SortBy == "type" ? (search?.SortDirection == "asc" ? " ↑" : " ↓") : "")</a>
    </div>

    @if (search != null &&
        (!string.IsNullOrEmpty(search.SearchTerm) || search.FileType.HasValue ||
         search.DateFrom.HasValue || search.DateTo.HasValue ||
         search.MinSizeBytes.HasValue || search.MaxSizeBytes.HasValue))
    {
        <div class="current-filter mb-2">
            <span>Фильтр:</span>
            <span>
                @if (!string.IsNullOrEmpty(search.SearchTerm))
                {
                    <text>поиск "@search.SearchTerm"; </text>
                }
                @if (search.FileType.HasValue)
                {
                    <text>тип @search.FileType; </text>
                }
                @if (search.DateFrom.HasValue || search.DateTo.HasValue)
                {
                    <text>дата @search.DateFrom?.ToString("dd.MM.yyyy") - @search.DateTo?.ToString("dd.MM.yyyy"); </text>
                }
                @if (search.MinSizeBytes.HasValue || search.MaxSizeBytes.HasValue)
                {
                    var minSize = search.MinSizeBytes.HasValue ? FormatSize(search.MinSizeBytes.Value) : "0";
                    var maxSize = search.MaxSizeBytes.HasValue ? FormatSize(search.MaxSizeBytes.Value) : "∞";
                    <text>размер @minSize - @maxSize; </text>
                }
            </span>
            <a href="?folderId=@ViewContext.HttpContext.Request.Query["folderId"]" class="btn btn-link btn-sm">Сбросить</a>
        </div>
    }

    <div class="files-grid">
    @foreach (var item in Model)
    {
        if (item.Type == "folder")
        {
            <div class="file-card explorer-item" data-type="folder" data-id="@item.Id" data-name="@item.Name">
                <div class="file-card-icon">
                    <img src="~/images/file-icons/@(item.IconName).svg" class="file-icon" alt="" />
                    @if (item.IsNetworkAvailable)
                    {
                        <i class="bi bi-cloud-check network-icon"></i>
                    }
                </div>
                <div class="file-card-content">
                    <h4 class="file-card-title" title="@item.Name">@item.Name</h4>
                    <p class="file-card-info">
                        <span class="file-date">@((item.UpdatedAt ?? item.CreatedAt).ToString("dd.MM.yyyy"))</span>
                    </p>
                    <p class="file-card-author">@item.UploadedByName</p>
                </div>
            </div>
        }
        else
        {
            <div class="file-card explorer-item" data-type="file" data-id="@item.Id" data-name="@item.Name">
                <div class="file-card-icon">
                    <img src="~/images/file-icons/@(item.IconName).svg" class="file-icon" alt="" />
                    @if (item.IsNetworkAvailable)
                    {
                        <i class="bi bi-cloud-check network-icon"></i>
                    }
                </div>
                <div class="file-card-content">
                    <h4 class="file-card-title" title="@item.Name">@item.Name</h4>
                    <p class="file-card-info">
                        <span class="file-size">@FormatSize(item.SizeBytes ?? 0)</span>
                        <span class="file-date">@((item.UpdatedAt ?? item.CreatedAt).ToString("dd.MM.yyyy"))</span>
                    </p>
                    <p class="file-card-author">@item.UploadedByName</p>
                </div>
            </div>
        }
    }
    </div>
}
else
{
    <div class="empty-state">
        <div style="font-size: 64px; margin-bottom: 20px;"><i class="bi bi-file-earmark"></i></div>
        <h3>Файлы не найдены</h3>
        <p style="color: #999; margin-bottom: 30px;">
        @if (!string.IsNullOrEmpty(ViewContext.HttpContext.Request.Query["SearchRequest.SearchTerm"]))
        {
            <span>По вашему запросу ничего не найдено. Попробуйте изменить критерии поиска.</span>
        }
        else
        {
            <span>В данной папке пока нет файлов.</span>
        }
        </p>
    </div>
}

<script>
    function sortBy(field) {
        const params = new URLSearchParams(window.location.search);
        const currentSort = params.get('SearchRequest.SortBy');
        const currentDirection = params.get('SearchRequest.SortDirection') || 'asc';
        const newDirection = (currentSort === field && currentDirection === 'asc') ? 'desc' : 'asc';
        params.set('SearchRequest.SortBy', field);
        params.set('SearchRequest.SortDirection', newDirection);
        params.set('SearchRequest.Page', '1');
        window.location.search = params.toString();
    }
</script>

@functions {
    private string FormatSize(long size)
    {
        string[] suffix = { "Б", "КБ", "МБ", "ГБ", "ТБ" };
        double len = size;
        int order = 0;
        while (len >= 1024 && order < suffix.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {suffix[order]}";
    }
}
