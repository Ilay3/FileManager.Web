@model IEnumerable<FileManager.Application.DTOs.TreeNodeDto>
@using System.Linq

@if (Model.Any())
{
    <div class="sort-controls">
        <span>Сортировка:</span>
        <a href="javascript:void(0)" onclick="sortBy('name')" class="sort-link">По имени</a>
        <a href="javascript:void(0)" onclick="sortBy('date')" class="sort-link">По дате</a>
        <a href="javascript:void(0)" onclick="sortBy('size')" class="sort-link">По размеру</a>
        <a href="javascript:void(0)" onclick="sortBy('type')" class="sort-link">По типу</a>
    </div>

    <div class="files-grid">
    @foreach (var item in Model)
    {
        if (item.Type == "folder")
        {
            <div class="file-card explorer-item" data-type="folder" data-id="@item.Id" data-name="@item.Name">
                <div class="file-card-icon">
                    <i class="bi bi-folder"></i>
                    @if (item.IsNetworkAvailable)
                    {
                        <i class="bi bi-cloud-check network-icon"></i>
                    }
                </div>
                <div class="file-card-content">
                    <h4 class="file-card-title" title="@item.Name">@item.Name</h4>
                    <p class="file-card-info">
                        <span class="file-date">@((item.UpdatedAt ?? item.CreatedAt).ToString("dd.MM.yyyy"))</span>
                    </p>
                    <p class="file-card-author">@item.UploadedByName</p>
                </div>
            </div>
        }
        else
        {
            <div class="file-card explorer-item" data-type="file" data-id="@item.Id" data-name="@item.Name">
                <div class="file-card-icon">
                    @Html.Raw(GetFileIcon(item.Extension))
                    @if (item.IsNetworkAvailable)
                    {
                        <i class="bi bi-cloud-check network-icon"></i>
                    }
                </div>
                <div class="file-card-content">
                    <h4 class="file-card-title" title="@item.Name">@item.Name</h4>
                    <p class="file-card-info">
                        <span class="file-size">@FormatSize(item.SizeBytes ?? 0)</span>
                        <span class="file-date">@((item.UpdatedAt ?? item.CreatedAt).ToString("dd.MM.yyyy"))</span>
                    </p>
                    <p class="file-card-author">@item.UploadedByName</p>
                </div>
            </div>
        }
    }
    </div>
}
else
{
    <div class="empty-state">
        <div style="font-size: 64px; margin-bottom: 20px;"><i class="bi bi-file-earmark"></i></div>
        <h3>Файлы не найдены</h3>
        <p style="color: #999; margin-bottom: 30px;">
        @if (!string.IsNullOrEmpty(ViewContext.HttpContext.Request.Query["SearchRequest.SearchTerm"]))
        {
            <span>По вашему запросу ничего не найдено. Попробуйте изменить критерии поиска.</span>
        }
        else
        {
            <span>В данной папке пока нет файлов. Загрузите первый файл, чтобы начать работу.</span>
        }
        </p>
        @{ var currentFolder = ViewContext.HttpContext.Request.Query["folderId"].ToString(); }
        <button class="btn btn-primary" onclick="openUploadModal('@currentFolder')">
            <i class="bi bi-upload"></i> Загрузить файл
        </button>
    </div>
}

<script>
    function sortBy(field) {
        const params = new URLSearchParams(window.location.search);
        const currentSort = params.get('SearchRequest.SortBy');
        const currentDirection = params.get('SearchRequest.SortDirection') || 'asc';
        const newDirection = (currentSort === field && currentDirection === 'asc') ? 'desc' : 'asc';
        params.set('SearchRequest.SortBy', field);
        params.set('SearchRequest.SortDirection', newDirection);
        params.set('SearchRequest.Page', '1');
        window.location.search = params.toString();
    }
</script>

@functions {
    private string GetFileIcon(string? extension)
    {
        var ext = extension?.ToLowerInvariant();
        return ext switch
        {
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" or ".svg" => "<i class='bi bi-file-earmark-image'></i>",
            ".pdf" => "<i class='bi bi-file-earmark-pdf'></i>",
            ".zip" or ".rar" or ".7z" => "<i class='bi bi-file-earmark-zip'></i>",
            ".mp3" or ".wav" or ".flac" => "<i class='bi bi-file-earmark-music'></i>",
            ".mp4" or ".avi" or ".mov" or ".mkv" => "<i class='bi bi-file-earmark-play'></i>",
            ".doc" or ".docx" => "<i class='bi bi-file-earmark-word'></i>",
            ".xls" or ".xlsx" => "<i class='bi bi-file-earmark-excel'></i>",
            ".ppt" or ".pptx" => "<i class='bi bi-file-earmark-ppt'></i>",
            ".txt" or ".md" => "<i class='bi bi-file-earmark-text'></i>",
            _ => "<i class='bi bi-file-earmark'></i>"
        };
    }

    private string FormatSize(long size)
    {
        string[] suffix = { "Б", "КБ", "МБ", "ГБ", "ТБ" };
        double len = size;
        int order = 0;
        while (len >= 1024 && order < suffix.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {suffix[order]}";
    }
}
