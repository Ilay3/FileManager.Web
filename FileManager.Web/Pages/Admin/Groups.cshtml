@page "/Admin/Groups"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@{
    ViewData["Title"] = "Группы";

    if (User.FindFirst("IsAdmin")?.Value != "True")
    {
        Response.Redirect("/Files");
        return;
    }
}

<h2>Управление группами</h2>

<form id="groupForm" class="mb-3">
    <input type="text" id="groupName" placeholder="Название группы" required />
    <button type="submit" class="btn btn-primary">Создать</button>
</form>

<div id="groupsContainer"></div>

<script>
async function loadGroups() {
    const res = await fetchWithProgress('/api/groups', { credentials: 'include' });
    const groups = res.ok ? await res.json() : [];
    const container = document.getElementById('groupsContainer');
    container.innerHTML = '';
    for (const g of groups) {
        const detailsRes = await fetchWithProgress(`/api/groups/${g.id}`, { credentials: 'include' });
        const details = detailsRes.ok ? await detailsRes.json() : null;
        const div = document.createElement('div');
        div.className = 'group-item';
        let usersHtml = '';
        if (details) {
            usersHtml = '<ul>' + details.users.map(u =>
                `<li>${u.fullName} <button onclick="removeUser('${g.id}','${u.id}')">Удалить</button></li>`
            ).join('') + '</ul>';
        }
        div.innerHTML = `<h3>${g.name}</h3>` +
            usersHtml +
            `<select id="select-${g.id}"></select>` +
            `<button onclick="addUser('${g.id}')">Добавить пользователя</button>` +
            `<button onclick="deleteGroup('${g.id}')">Удалить группу</button>`;
        container.appendChild(div);
        if (details)
            await loadAvailableUsers(g.id, details.users.map(u => u.id));
    }
}

async function loadAvailableUsers(groupId, existing) {
    const res = await fetchWithProgress('/api/users', { credentials: 'include' });
    const users = res.ok ? await res.json() : [];
    const select = document.getElementById(`select-${groupId}`);
    select.innerHTML = users
        .filter(u => !existing.includes(u.id))
        .map(u => `<option value="${u.id}">${u.fullName}</option>`)
        .join('');
}

async function createGroup(e) {
    e.preventDefault();
    const name = document.getElementById('groupName').value;
    await fetchWithProgress('/api/groups', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name }),
        credentials: 'include'
    });
    document.getElementById('groupName').value = '';
    await loadGroups();
}

async function addUser(groupId) {
    const userId = document.getElementById(`select-${groupId}`).value;
    if (!userId) return;
    await fetchWithProgress(`/api/groups/${groupId}/users/${userId}`, { method: 'POST', credentials: 'include' });
    await loadGroups();
}

async function removeUser(groupId, userId) {
    await fetchWithProgress(`/api/groups/${groupId}/users/${userId}`, { method: 'DELETE', credentials: 'include' });
    await loadGroups();
}

async function deleteGroup(groupId) {
    await fetchWithProgress(`/api/groups/${groupId}`, { method: 'DELETE', credentials: 'include' });
    await loadGroups();
}

document.getElementById('groupForm').addEventListener('submit', createGroup);
loadGroups();
</script>

