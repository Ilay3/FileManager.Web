@page "/Admin/Users"
@model FileManager.Web.Pages.Admin.UsersModel
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@{
    ViewData["Title"] = "Пользователи";
    if (User.FindFirst("IsAdmin")?.Value != "True")
    {
        Response.Redirect("/Files");
        return;
    }
}

<div class="admin-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h3 mb-0">Управление пользователями</h1>
            <p class="text-muted small mb-0">Создание, редактирование и удаление пользователей системы</p>
        </div>
        <a href="/Admin/CreateUser" class="btn btn-primary">
            <i class="bi bi-person-plus me-2"></i>Создать пользователя
        </a>
    </div>

    <div class="card shadow-sm border-0">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0" id="usersTable">
                    <thead class="table-light">
                        <tr>
                            <th class="border-bottom py-3">Email</th>
                            <th class="border-bottom py-3">ФИО</th>
                            <th class="border-bottom py-3">Отдел</th>
                            <th class="border-bottom py-3">Администратор</th>
                            <th class="border-bottom py-3">Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Данные загружаются через JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Модальное окно подтверждения удаления -->
    <div class="modal fade" id="deleteUserModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Подтверждение удаления</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Вы действительно хотите удалить пользователя <span id="deleteUserName" class="fw-bold"></span>?</p>
                    <p class="text-danger">Это действие нельзя отменить.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Удалить</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Уведомления -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="userToast" class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body" id="toastMessage">
                    Операция выполнена успешно
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>
</div>

<script>
    let deleteUserId = null;
    let deleteUserModal = null;
    let userToast = null;

    document.addEventListener('DOMContentLoaded', function() {
        deleteUserModal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
        userToast = new bootstrap.Toast(document.getElementById('userToast'));

        document.getElementById('confirmDeleteBtn').addEventListener('click', async function() {
            if (deleteUserId) {
                await deleteUser(deleteUserId);
                deleteUserModal.hide();
            }
        });

        loadUsers();
    });

    async function loadUsers() {
        showLoader();
        try {
            const res = await fetch('/api/users', { credentials: 'include' });
            const users = res.ok ? await res.json() : [];

            const tbody = document.querySelector('#usersTable tbody');
            tbody.innerHTML = '';

            if (users.length === 0) {
                const tr = document.createElement('tr');
                tr.innerHTML = '<td colspan="5" class="text-center py-4">Нет пользователей</td>';
                tbody.appendChild(tr);
                return;
            }

            for (const user of users) {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="align-middle py-3">${user.email}</td>
                    <td class="align-middle py-3">${user.fullName}</td>
                    <td class="align-middle py-3">${user.department ?? '-'}</td>
                    <td class="align-middle py-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="admin-${user.id}"
                                ${user.isAdmin ? 'checked' : ''} onchange="toggleAdmin('${user.id}', this.checked)">
                            <label class="form-check-label" for="admin-${user.id}"></label>
                        </div>
                    </td>
                    <td class="align-middle py-3">
                        <button class="btn btn-sm btn-outline-danger" onclick="showDeleteModal('${user.id}', '${user.fullName}')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>`;
                tbody.appendChild(tr);
            }
        } catch (error) {
            console.error('Error loading users:', error);
            showNotification('Ошибка загрузки пользователей', 'error');
        } finally {
            hideLoader();
        }
    }

    async function deleteUser(id) {
        showLoader();
        try {
            const res = await fetch(`/api/users/${id}`, {
                method: 'DELETE',
                credentials: 'include'
            });

            if (res.ok) {
                showToast('Пользователь успешно удален', 'success');
                await loadUsers();
            } else {
                showToast('Ошибка при удалении пользователя', 'danger');
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            showToast('Ошибка при удалении пользователя', 'danger');
        } finally {
            hideLoader();
        }
    }

    async function toggleAdmin(id, isAdmin) {
        showLoader();
        try {
            const res = await fetch(`/api/users/${id}/admin`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ isAdmin }),
                credentials: 'include'
            });

            if (res.ok) {
                showToast(`Права администратора ${isAdmin ? 'предоставлены' : 'отозваны'}`, 'success');
            } else {
                showToast('Ошибка при изменении прав пользователя', 'danger');
                // Откатываем изменение в UI
                document.getElementById(`admin-${id}`).checked = !isAdmin;
            }
        } catch (error) {
            console.error('Error toggling admin status:', error);
            showToast('Ошибка при изменении прав пользователя', 'danger');
            // Откатываем изменение в UI
            document.getElementById(`admin-${id}`).checked = !isAdmin;
        } finally {
            hideLoader();
        }
    }

    function showDeleteModal(userId, userName) {
        deleteUserId = userId;
        document.getElementById('deleteUserName').textContent = userName;
        deleteUserModal.show();
    }

    function showToast(message, type) {
        const toast = document.getElementById('userToast');
        toast.classList.remove('bg-success', 'bg-danger');
        toast.classList.add(type === 'success' ? 'bg-success' : 'bg-danger');

        document.getElementById('toastMessage').textContent = message;
        userToast.show();
    }
</script>

<style>
    .admin-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
    }

    .table {
        width: 100%;
        margin-bottom: 0;
    }

        .table th {
            font-weight: 600;
            color: #495057;
        }

        .table td, .table th {
            padding: 16px;
            vertical-align: middle;
            border-color: #f0f0f0;
        }

    .card {
        border-radius: 8px;
        overflow: hidden;
    }

    .form-check-input {
        cursor: pointer;
    }

    .form-switch .form-check-input {
        width: 36px;
        height: 20px;
    }

        .form-switch .form-check-input:checked {
            background-color: #198754;
            border-color: #198754;
        }

    @@media (max-width: 768px) {
        .table th, .table td

    {
        padding: 10px;
    }

    }
</style>