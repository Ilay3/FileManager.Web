@page "/Trash"
@model FileManager.Web.Pages.Trash.IndexModel
@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@{
    ViewData["Title"] = "Корзина";
}

<h2>Корзина</h2>

<table class="table">
    <thead>
        <tr>
            <th>Название</th>
            <th>Тип</th>
            <th>Удалено</th>
            <th>Действия</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model.Items)
    {
        <tr>
            <td>@item.Name</td>
            <td>@(item.Type == "file" ? "Файл" : "Папка")</td>
            <td>@item.DeletedAt?.ToLocalTime().ToString("g")</td>
            <td>
                <button class="btn btn-sm btn-success" onclick="restore('@item.Id','@item.Type')">Восстановить</button>
                <button class="btn btn-sm btn-danger" onclick="remove('@item.Id','@item.Type')">Удалить</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@section Scripts {
<script>
async function restore(id,type){
    const url = type==='file'? `/api/trash/restore/file/${id}` : `/api/trash/restore/folder/${id}`;
    const res = await fetch(url,{method:'POST'});
    if(res.ok) location.reload();
}
async function remove(id,type){
    if(!confirm('Удалить окончательно?')) return;
    const url = type==='file'? `/api/trash/file/${id}` : `/api/trash/folder/${id}`;
    const res = await fetch(url,{method:'DELETE'});
    if(res.ok) location.reload();
}
</script>
}
